{"version":3,"sources":["components/AlbumItem.js","js/constants/action-types.js","js/reducers/index.js","js/store/index.js","js/actions/index.js","components/Albums.js","components/GalleryItem.js","components/AlbumGallery.js","components/FavoriteGallery.js","App.js","serviceWorker.js","index.js"],"names":["AlbumItem","props","className","onClick","handleClick","item","ADD_FAV_ITEM","SELECTED_ALBUM","REMOVE_FAV_ITEM","CLEAR_FAVORITES","initialState","favorite","selectedAlbum","rootReducer","state","action","type","Object","assign","payload","concat","filter","id","persistedState","serializedState","localStorage","getItem","JSON","parse","e","console","log","loadFromLocalStorage","store","createStore","subscribe","stringify","setItem","saveToLocalStorage","getState","removeFavItem","selectAlbum","Albums","categoryTitle","albums","albumsId","bind","fetch","then","response","json","setState","uniqueIds","Array","from","Set","map","albumId","albumData","this","i","dispatch","history","push","pathname","albumsItems","key","Component","GalleryItem","checked","isFavGallery","isFavorite","onChange","handleChange","caption","src","url","alt","title","AlbumGallery","favorites","length","fav","done","undefined","sectedItem","prevState","updatedAlbum","albumItems","FavoriteGallery","favoruteAlbum","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f075c8e0.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction AlbumItem(props){\r\n    return (\r\n            <div className=\"module\" onClick={() => props.handleClick(props.item)}>\r\n                Album {props.item}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default AlbumItem","export const ADD_FAV_ITEM = \"ADD_FAV_ITEM\";\r\nexport const SELECTED_ALBUM = \"SELECTED_ALBUM\";\r\nexport const REMOVE_FAV_ITEM = \"REMOVE_FAV_ITEM\";\r\nexport const CLEAR_FAVORITES = \"CLEAR_FAVORITES\";","import { ADD_FAV_ITEM } from \"../constants/action-types\";\r\nimport { SELECTED_ALBUM } from \"../constants/action-types\";\r\nimport { REMOVE_FAV_ITEM } from \"../constants/action-types\";\r\nimport { CLEAR_FAVORITES } from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n    favorite: [],\r\n    selectedAlbum: []\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  if (action.type === SELECTED_ALBUM) {\r\n    return Object.assign({}, state, {\r\n      selectedAlbum: action.payload\r\n    });\r\n  }\r\n\r\n  if (action.type === ADD_FAV_ITEM) {\r\n    return Object.assign({}, state, {\r\n      favorite: state.favorite.concat(action.payload)\r\n    });\r\n  }\r\n\r\n  if (action.type === REMOVE_FAV_ITEM) {\r\n    return Object.assign({}, state, {\r\n      favorite: [...state.favorite.filter(item => item.id !== action.payload.id)]\r\n    });\r\n  }\r\n\r\n  if (action.type === CLEAR_FAVORITES) {\r\n    return Object.assign({}, state, {\r\n      favorite: action.payload\r\n    });\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst persistedState = loadFromLocalStorage();\r\nconst store = createStore(rootReducer, persistedState);\r\n\r\n\r\nfunction saveToLocalStorage(state){\r\n    try{\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch(e){\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nfunction loadFromLocalStorage(){\r\n    try{\r\n        const serializedState = localStorage.getItem('state');\r\n\r\n        if (serializedState === null){\r\n            return undefined;\r\n        } else {\r\n            return JSON.parse(serializedState);\r\n        }\r\n    } catch(e) {\r\n        console.log(e);\r\n        return undefined;\r\n    }\r\n}\r\n\r\nstore.subscribe(() => saveToLocalStorage(store.getState()));\r\n\r\nexport default store;","import { ADD_FAV_ITEM } from \"../constants/action-types\";\r\nimport { SELECTED_ALBUM } from \"../constants/action-types\";\r\nimport { REMOVE_FAV_ITEM } from \"../constants/action-types\";\r\nimport { CLEAR_FAVORITES } from \"../constants/action-types\";\r\n\r\nexport function addFavItem(payload) {\r\n    return { type: ADD_FAV_ITEM, payload };\r\n};\r\n\r\nexport function removeFavItem(payload) {\r\n    return { type: REMOVE_FAV_ITEM, payload };\r\n};\r\n\r\nexport function clearFavorites(payload) {\r\n    return { type: CLEAR_FAVORITES, payload };\r\n};\r\n\r\nexport function selectAlbum(payload) {\r\n    return { type: SELECTED_ALBUM, payload };\r\n};","import React, {Component} from 'react';\r\nimport AlbumItem from './AlbumItem'\r\nimport '../App.css';\r\nimport store from \"../js/store/index.js\";\r\nimport { selectAlbum } from \"../js/actions/index.js\";\r\n\r\nclass Albums extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      categoryTitle:'Albums',\r\n      albums:[],\r\n      albumsId:[]\r\n    }\r\n    \r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n      fetch(\"https://jsonplaceholder.typicode.com/photos\")\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              //const albumsData = response;\r\n              this.setState({ albums: response });\r\n              const uniqueIds = Array.from(new Set(response.map(item => item.albumId)));\r\n              this.setState({ albumsId: uniqueIds });\r\n          });\r\n  }\r\n\r\n handleClick(item) {\r\n  const albumData =  this.state.albums.filter(i=>i.albumId === item);\r\n\r\n  store.dispatch(selectAlbum(albumData));\r\n  this.props.history.push({pathname: '/album'});\r\n }   \r\n\r\n  render(){\r\n    const albumsItems = this.state.albumsId.map(item => <AlbumItem key={item} item={item} handleClick={this.handleClick} />);\r\n\r\n    return (        \r\n      <div>\r\n          <div className=\"header\">\r\n            <h1>\r\n              {this.state.categoryTitle}\r\n            </h1>\r\n            <hr/>\r\n            <div className=\"darkButton\" onClick={() => this.props.history.push('/fav')}>Favorites</div>\r\n          </div>\r\n          <div className=\"grid\">\r\n            {albumsItems}\r\n          </div>  \r\n      </div>      \r\n    )\r\n  }\r\n}\r\n\r\nexport default Albums;","import React from \"react\"\r\n\r\nfunction GalleryItem(props){\r\n    return (\r\n        <div className=\"hoverOpacity galleryItem\">\r\n            <input \r\n            type=\"checkbox\" \r\n            checked={props.isFavGallery?false:props.item.isFavorite} \r\n            onChange={() => props.handleChange(props.item)}\r\n            />\r\n            <label onClick={() => props.handleChange(props.item)} >{props.caption}</label>\r\n             <figure> \r\n                 <img  src={props.item.url} alt=\"\" />\r\n             </figure> \r\n             <h3>{props.item.title}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GalleryItem","import React, {Component} from 'react';\r\nimport GalleryItem from './GalleryItem';\r\nimport '../App.css';\r\nimport store from \"../js/store/index.js\";\r\nimport { selectAlbum, removeFavItem, addFavItem } from \"../js/actions/index.js\";\r\n\r\nclass AlbumGallery extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    const albumData = store.getState().selectedAlbum;\r\n    const favorites = store.getState().favorite;\r\n\r\n    for(let i = 0; i < albumData.length; i++){\r\n      albumData[i].isFavorite = false;\r\n      for(let fav = 0; fav < favorites.length; fav++){\r\n        if (albumData[i].id === favorites[fav].id){\r\n          albumData[i].isFavorite = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.state = {\r\n      done: undefined,\r\n      selectedAlbum: albumData\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(sectedItem) {\r\n    this.setState(prevState => {\r\n        const updatedAlbum = prevState.selectedAlbum.map(item => {\r\n            if (item.id === sectedItem.id) {               \r\n              item.isFavorite = !item.isFavorite;  \r\n\r\n              if (item.isFavorite){\r\n                store.dispatch(addFavItem(item));\r\n              } else {\r\n                store.dispatch(removeFavItem(item));\r\n              }\r\n            }\r\n            \r\n            return item\r\n        })\r\n        store.dispatch(selectAlbum(updatedAlbum));\r\n         return {\r\n           selectedAlbum: updatedAlbum\r\n         }\r\n     });\r\n  }    \r\n\r\n  render(){\r\n    const { selectedAlbum } = this.state;\r\n    const albumItems = selectedAlbum.map(item => <GalleryItem key={item.id} item={item} handleChange={this.handleChange} isFavGallery={false} caption={\"Favorite\"} />);\r\n\r\n    return (        \r\n      <div>\r\n          <div className=\"header\">\r\n            <h1>\r\n              Album {selectedAlbum.length?selectedAlbum[0].albumId:''}\r\n            </h1>\r\n            <hr/>\r\n            <div className=\"darkButton\" onClick={() => this.props.history.push('/fav')}>Favorites</div>\r\n          </div>\r\n          <div className=\"gridGallery\">\r\n            {albumItems}\r\n          </div>           \r\n      </div>    \r\n    )\r\n  }\r\n}\r\n\r\nexport default AlbumGallery;","import React, {Component} from 'react';\r\nimport GalleryItem from './GalleryItem';\r\nimport '../App.css';\r\nimport store from \"../js/store/index.js\";\r\nimport { removeFavItem } from \"../js/actions/index.js\";\r\n\r\nclass FavoriteGallery extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      favoruteAlbum: store.getState().favorite\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(item) {\r\n    this.setState(prevState => {\r\n      store.dispatch(removeFavItem(item));\r\n\r\n      return {\r\n        favoruteAlbum: store.getState().favorite\r\n      }\r\n     });\r\n  }    \r\n\r\n  render(){\r\n    const { favoruteAlbum } = this.state;\r\n    const albumItems = favoruteAlbum.map(item => <GalleryItem key={item.id} item={item} handleChange={this.handleChange} isFavGallery={true} caption={\"Remove\"} />);\r\n\r\n    return (        \r\n      <div>\r\n          <div className=\"header\">\r\n            <h1>\r\n            Favorites\r\n            </h1>\r\n            <hr/>\r\n          </div>\r\n          <div className=\"gridGallery\">\r\n            {albumItems}\r\n          </div>  \r\n      </div>    \r\n    )\r\n  }\r\n}\r\n\r\nexport default FavoriteGallery;","import React, {Component} from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Albums from './components/Albums';\nimport AlbumGallery from './components/AlbumGallery';\nimport FavoriteGallery from './components/FavoriteGallery';\n\nclass App extends Component {\n  render(){\n    return(\n      <BrowserRouter>\n        <div>\n          <Switch>\n            <Route path=\"/\" component={Albums} exact />\n            <Route path=\"/album\" component={AlbumGallery} />\n            <Route path=\"/fav\" component={FavoriteGallery} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}